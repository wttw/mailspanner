// Code generated by "enumer -type Hint -trimprefix Hint -json"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _HintName = "InfoWarnErrorSendSendTlsSendQSendTlsQSendChunkRecvRecvTlsRecvQRecvTlsQRecvChunk"

var _HintIndex = [...]uint8{0, 4, 8, 13, 17, 24, 29, 37, 46, 50, 57, 62, 70, 79}

const _HintLowerName = "infowarnerrorsendsendtlssendqsendtlsqsendchunkrecvrecvtlsrecvqrecvtlsqrecvchunk"

func (i Hint) String() string {
	if i < 0 || i >= Hint(len(_HintIndex)-1) {
		return fmt.Sprintf("Hint(%d)", i)
	}
	return _HintName[_HintIndex[i]:_HintIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HintNoOp() {
	var x [1]struct{}
	_ = x[HintInfo-(0)]
	_ = x[HintWarn-(1)]
	_ = x[HintError-(2)]
	_ = x[HintSend-(3)]
	_ = x[HintSendTls-(4)]
	_ = x[HintSendQ-(5)]
	_ = x[HintSendTlsQ-(6)]
	_ = x[HintSendChunk-(7)]
	_ = x[HintRecv-(8)]
	_ = x[HintRecvTls-(9)]
	_ = x[HintRecvQ-(10)]
	_ = x[HintRecvTlsQ-(11)]
	_ = x[HintRecvChunk-(12)]
}

var _HintValues = []Hint{HintInfo, HintWarn, HintError, HintSend, HintSendTls, HintSendQ, HintSendTlsQ, HintSendChunk, HintRecv, HintRecvTls, HintRecvQ, HintRecvTlsQ, HintRecvChunk}

var _HintNameToValueMap = map[string]Hint{
	_HintName[0:4]:        HintInfo,
	_HintLowerName[0:4]:   HintInfo,
	_HintName[4:8]:        HintWarn,
	_HintLowerName[4:8]:   HintWarn,
	_HintName[8:13]:       HintError,
	_HintLowerName[8:13]:  HintError,
	_HintName[13:17]:      HintSend,
	_HintLowerName[13:17]: HintSend,
	_HintName[17:24]:      HintSendTls,
	_HintLowerName[17:24]: HintSendTls,
	_HintName[24:29]:      HintSendQ,
	_HintLowerName[24:29]: HintSendQ,
	_HintName[29:37]:      HintSendTlsQ,
	_HintLowerName[29:37]: HintSendTlsQ,
	_HintName[37:46]:      HintSendChunk,
	_HintLowerName[37:46]: HintSendChunk,
	_HintName[46:50]:      HintRecv,
	_HintLowerName[46:50]: HintRecv,
	_HintName[50:57]:      HintRecvTls,
	_HintLowerName[50:57]: HintRecvTls,
	_HintName[57:62]:      HintRecvQ,
	_HintLowerName[57:62]: HintRecvQ,
	_HintName[62:70]:      HintRecvTlsQ,
	_HintLowerName[62:70]: HintRecvTlsQ,
	_HintName[70:79]:      HintRecvChunk,
	_HintLowerName[70:79]: HintRecvChunk,
}

var _HintNames = []string{
	_HintName[0:4],
	_HintName[4:8],
	_HintName[8:13],
	_HintName[13:17],
	_HintName[17:24],
	_HintName[24:29],
	_HintName[29:37],
	_HintName[37:46],
	_HintName[46:50],
	_HintName[50:57],
	_HintName[57:62],
	_HintName[62:70],
	_HintName[70:79],
}

// HintString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HintString(s string) (Hint, error) {
	if val, ok := _HintNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HintNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Hint values", s)
}

// HintValues returns all values of the enum
func HintValues() []Hint {
	return _HintValues
}

// HintStrings returns a slice of all String values of the enum
func HintStrings() []string {
	strs := make([]string, len(_HintNames))
	copy(strs, _HintNames)
	return strs
}

// IsAHint returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Hint) IsAHint() bool {
	for _, v := range _HintValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Hint
func (i Hint) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Hint
func (i *Hint) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Hint should be a string, got %s", data)
	}

	var err error
	*i, err = HintString(s)
	return err
}
