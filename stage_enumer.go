// Code generated by "enumer -type Stage -trimprefix Stage -json"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StageName = "NoneConnectBannerFirstHeloFirstEhloXclientStarttlsTlsHeloEhloAuthMailFromRcptToDataDot"

var _StageIndex = [...]uint8{0, 4, 11, 17, 26, 35, 42, 50, 53, 57, 61, 65, 69, 73, 77, 79, 83, 86}

const _StageLowerName = "noneconnectbannerfirsthelofirstehloxclientstarttlstlsheloehloauthmailfromrcpttodatadot"

func (i Stage) String() string {
	if i < 0 || i >= Stage(len(_StageIndex)-1) {
		return fmt.Sprintf("Stage(%d)", i)
	}
	return _StageName[_StageIndex[i]:_StageIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StageNoOp() {
	var x [1]struct{}
	_ = x[StageNone-(0)]
	_ = x[StageConnect-(1)]
	_ = x[StageBanner-(2)]
	_ = x[StageFirstHelo-(3)]
	_ = x[StageFirstEhlo-(4)]
	_ = x[StageXclient-(5)]
	_ = x[StageStarttls-(6)]
	_ = x[StageTls-(7)]
	_ = x[StageHelo-(8)]
	_ = x[StageEhlo-(9)]
	_ = x[StageAuth-(10)]
	_ = x[StageMail-(11)]
	_ = x[StageFrom-(12)]
	_ = x[StageRcpt-(13)]
	_ = x[StageTo-(14)]
	_ = x[StageData-(15)]
	_ = x[StageDot-(16)]
}

var _StageValues = []Stage{StageNone, StageConnect, StageBanner, StageFirstHelo, StageFirstEhlo, StageXclient, StageStarttls, StageTls, StageHelo, StageEhlo, StageAuth, StageMail, StageFrom, StageRcpt, StageTo, StageData, StageDot}

var _StageNameToValueMap = map[string]Stage{
	_StageName[0:4]:        StageNone,
	_StageLowerName[0:4]:   StageNone,
	_StageName[4:11]:       StageConnect,
	_StageLowerName[4:11]:  StageConnect,
	_StageName[11:17]:      StageBanner,
	_StageLowerName[11:17]: StageBanner,
	_StageName[17:26]:      StageFirstHelo,
	_StageLowerName[17:26]: StageFirstHelo,
	_StageName[26:35]:      StageFirstEhlo,
	_StageLowerName[26:35]: StageFirstEhlo,
	_StageName[35:42]:      StageXclient,
	_StageLowerName[35:42]: StageXclient,
	_StageName[42:50]:      StageStarttls,
	_StageLowerName[42:50]: StageStarttls,
	_StageName[50:53]:      StageTls,
	_StageLowerName[50:53]: StageTls,
	_StageName[53:57]:      StageHelo,
	_StageLowerName[53:57]: StageHelo,
	_StageName[57:61]:      StageEhlo,
	_StageLowerName[57:61]: StageEhlo,
	_StageName[61:65]:      StageAuth,
	_StageLowerName[61:65]: StageAuth,
	_StageName[65:69]:      StageMail,
	_StageLowerName[65:69]: StageMail,
	_StageName[69:73]:      StageFrom,
	_StageLowerName[69:73]: StageFrom,
	_StageName[73:77]:      StageRcpt,
	_StageLowerName[73:77]: StageRcpt,
	_StageName[77:79]:      StageTo,
	_StageLowerName[77:79]: StageTo,
	_StageName[79:83]:      StageData,
	_StageLowerName[79:83]: StageData,
	_StageName[83:86]:      StageDot,
	_StageLowerName[83:86]: StageDot,
}

var _StageNames = []string{
	_StageName[0:4],
	_StageName[4:11],
	_StageName[11:17],
	_StageName[17:26],
	_StageName[26:35],
	_StageName[35:42],
	_StageName[42:50],
	_StageName[50:53],
	_StageName[53:57],
	_StageName[57:61],
	_StageName[61:65],
	_StageName[65:69],
	_StageName[69:73],
	_StageName[73:77],
	_StageName[77:79],
	_StageName[79:83],
	_StageName[83:86],
}

// StageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StageString(s string) (Stage, error) {
	if val, ok := _StageNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StageNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Stage values", s)
}

// StageValues returns all values of the enum
func StageValues() []Stage {
	return _StageValues
}

// StageStrings returns a slice of all String values of the enum
func StageStrings() []string {
	strs := make([]string, len(_StageNames))
	copy(strs, _StageNames)
	return strs
}

// IsAStage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Stage) IsAStage() bool {
	for _, v := range _StageValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Stage
func (i Stage) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Stage
func (i *Stage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Stage should be a string, got %s", data)
	}

	var err error
	*i, err = StageString(s)
	return err
}
